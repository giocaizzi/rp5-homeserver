user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=assets:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    # DNS resolver for dynamic upstream resolution
    resolver 127.0.0.11 valid=30s ipv6=off;

    # Dynamic upstream resolution to handle services that may not be available at startup

    # Default server block - return 444 for unknown hosts
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        ssl_reject_handshake on;
        return 444;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name portainer.local n8n.local ollama.local netdata.local;
        return 301 https://$host$request_uri;
    }

    # Portainer proxy
    server {
        listen 443 ssl;
        http2 on;
        server_name portainer.local;

        # SSL configuration (self-signed for local development)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        location / {
            set $portainer_backend "portainer:9000";
            proxy_pass http://$portainer_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for Portainer
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # N8N proxy
    server {
        listen 443 ssl;
        http2 on;
        server_name n8n.local;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Error page for when service is unavailable
        error_page 502 503 504 @n8n_unavailable;
        
        location @n8n_unavailable {
            return 503 "N8N service is currently unavailable. Please try again later.";
            add_header Content-Type text/plain always;
        }

        # Rate limiting for login endpoints
        location /rest/login {
            limit_req zone=login burst=5 nodelay;
            set $n8n_backend "n8n:5678";
            proxy_pass http://$n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Static assets with higher rate limit
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            limit_req zone=assets burst=50 nodelay;
            set $n8n_backend "n8n:5678";
            proxy_pass http://$n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1h;
            add_header Cache-Control "public, immutable";
        }

        # Assets directory with higher rate limit
        location /assets/ {
            limit_req zone=assets burst=50 nodelay;
            set $n8n_backend "n8n:5678";
            proxy_pass http://$n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1h;
            add_header Cache-Control "public, immutable";
        }

        location / {
            limit_req zone=general burst=30 nodelay;
            set $n8n_backend "n8n:5678";
            proxy_pass http://$n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for N8N
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }

    # Ollama proxy
    server {
        listen 443 ssl;
        http2 on;
        server_name ollama.local;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Error page for when service is unavailable
        error_page 502 503 504 @ollama_unavailable;
        
        location @ollama_unavailable {
            return 503 "Ollama service is currently unavailable. Please try again later.";
            add_header Content-Type text/plain always;
        }

        # Increase timeouts for AI model operations
        proxy_read_timeout 300s;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;

        location / {
            limit_req zone=general burst=10 nodelay;
            set $ollama_backend "ollama:11434";
            proxy_pass http://$ollama_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Support for streaming responses
            proxy_buffering off;
            proxy_cache off;
        }
    }

    # Netdata proxy
    server {
        listen 443 ssl;
        http2 on;
        server_name netdata.local;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        location / {
            limit_req zone=general burst=20 nodelay;
            set $netdata_backend "host.docker.internal:19999";
            proxy_pass http://$netdata_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support for real-time updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}